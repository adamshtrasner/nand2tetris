/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
	 
	 // If instruction[7..8] equals 1 the the output is exactly as the ALU
	 
     ALU(x = x, y = y, zx = instruction[5], 
	 nx = instruction[4], 
	 zy = instruction[3],
	 ny = instruction[2],
	 f = instruction[1],
	 no = instruction[0],
	 out = outAlu, 
	 zr = zrAlu, ng = Alu);
	 
	 // If instruction[7] equals 0 the output will be x*y
	 
	 Mul(a = x, b = y, out = outMult);
	 
	 // Shift right x
	 ShiftRight(in = x, out = xRight);
	 
	 // Shift left x
	 ShiftLeft(in = x, out = xLeft);
	 
	 // Shift right y
	 ShiftRight(in = y, out = yRight);
	 
	 // Shift left y
	 ShiftLeft(in = y, out = yLeft);
	 
	 // Shift y or x right or left according to instruction[4..5]
	 Mux4Way16(a = yRight, b = xRight, c = yLeft, d = xLeft, sel = instruction[4..5], out = outShift);
	 
	 // Decide whether the output is :
	 // exactly as the ALU, x*y, or shift, according to instruction[7..8]
	 
	 // ng = 1 if output < 0, 0 otherwise
	 Mux4Way16(a = outMult, 
	 b = outShift, 
	 c = outMult, 
	 d = outAlu, 
	 sel = instruction[7..8],
	 out = out, out[15]=ng, out[0..7]=out1, out[8..15]=out2);
	 
	 // zr = 1 if output == 0, 0 otherwise
	 Or8Way(in=out1,out=zr1);
	 Or8Way(in=out2,out=zr2);
	 Or(a=zr1, b=zr2, out=newzr);
	 Not(in=newzr, out=zr);
	 
}
