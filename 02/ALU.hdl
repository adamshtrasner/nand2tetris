// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise
		  

    PARTS:
	
	// if (zx == 1) set x = 0 
	Mux16(a=x, b=false, sel=zx, out=newX);
	// if (zy == 1) set y = 0
	Mux16(a=y, b=false, sel=zy, out=newY);
	
	/* Nagating x and y */
    Not16(in=newX,out=notx);
	Not16(in=newY,out=noty);
	
	// if (nx == 1) set x = !x
	Mux16(a=newX,b=notx,sel=nx,out=newX1);
	// if (ny == 1) set y = !y
	Mux16(a=newY,b=noty,sel=ny,out=newY1);
	
	/* (1) x + y */
	Add16(a=newX1,b=newY1,out=xPLUSy);
	
	/* (2) x & y*/
	And16(a=newX1,b=newY1,out=xANDy);
	
	// if (f == 1)  set out = x + y, else out = x & y
	Mux16(a=xANDy,b=xPLUSy,sel=f,out=preout);
	
	// if (no == 1) set out = !out
	Not16(in=preout, out=notout);
	Mux16(a=preout,b=notout,sel=no,out=out, out[15]=firstout, out[0..7]=leftout, out[8..15]=rightout);
	
	/* if output < 0 */
	And(a=firstout,b=true,out=ng);
	
	/* if output == 0 */
	Or8Way(in=leftout,out=leftzr);
	Or8Way(in=rightout,out=rightzr);
	Or(a=leftzr, b=rightzr, out=newzr);
	/** Explanation: if either one of the sides of zr outputs 1,
	it means that the output is not zero, in this case we have to nagate 
	the output x in order to get the right output zr */
	Not(in=newzr, out=zr);
}