// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen;
    static Array two_to_the;
    static int blackPix;
    static int whitePix;
    static boolean black;
    static boolean white;
    static boolean colour;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let blackPix = 1;
        let whitePix = 0;
        let black = true;
        let white = false;
        let colour = black;

        let two_to_the = Array.new(16);

        let two_to_the[0] = 1;
        let two_to_the[1] = 2;
        let two_to_the[2] = 4;
        let two_to_the[3] = 8;
        let two_to_the[4] = 16;
        let two_to_the[5] = 32;
        let two_to_the[6] = 64;
        let two_to_the[7] = 128;
        let two_to_the[8] = 256;
        let two_to_the[9] = 512;
        let two_to_the[10] = 1024;
        let two_to_the[11] = 2048;
        let two_to_the[12] = 4096;
        let two_to_the[13] = 8192;
        let two_to_the[14] = 16384;
        let two_to_the[15] = 16384 + 16384;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;
        while (i < 8192) { let screen[i] = white; }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let colour = b;
        return;
    }

    /** Private function for specifically multiply a number by 32,
     *  since 32 is a 6 bit number and there's no use in using the
     *  regular Math.multiply. */
    function int mult32(int x) {
        var int i, shiftedX;

        let shiftedX = x;
        let i = 0;

        while (i < 5){
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return shiftedX;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr;
        var int bit;

        let addr = Screen.mult32(y) + (x/16);
        
        // set the (x%16)th bit of value to the current colour
        // x%y is (x & y - 1) if y is a power of 2
        let bit = two_to_the[x & 15];  // the (x%16) bit is 1, the rest is zero

        if (colour) { let screen[addr] = screen[addr] | bit; }
        else { let screen[addr] = screen[addr] & (~bit); }  // colour is white

        return;
    }

    /** Private functions for drawing diagnoal, horizontal and vertical lines. */

    // Diagonal line
    function void drawDiagLine( int x1, int y1, int x2, int y2, int dx, int dy ) {
        var int adyMinusbdx, a, b;
        var int yMinus;

        let adyMinusbdx = 0;
        let a = 0;
        let b = 0;
        
        if( dy < 0 ) { let yMinus = -1; }
        else { let yMinus = 1; }

        while( ~(a > dx) & (((yMinus = 1) & ~(b > dy)) | ((yMinus = -1) & ~(b < dy))) ) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if( adyMinusbdx < 0 ) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + (dy*yMinus);
            }
            else {
                let b = b + yMinus;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    // Vertical line
    function void drawVertLine( int x, int y1, int y2 ) {
        var int temp;
        
        // handle y1 > y2
        if( y1 > y2 ) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        
        while( ~(y1 > y2) ) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }
    
    // Horizontal Line
    function void subDrawHorizLine( int x1, int x2, int y) {
        while(~(x1 > x2)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }
    
        return;
    }


    function void drawHorizLine( int x1, int x2, int y ) {
        var int start_addr, end_addr;
        var int x1mod16, x2mod16;
        
        let x1mod16 = x1 & 15;
        let x2mod16 = x2 & 15;
        let start_addr = Screen.mult32(y) + (x1/16);
        let end_addr = Screen.mult32(y) + (x2/16) + (x2mod16 = 0);

        if( start_addr = end_addr ) {   
            do Screen.subDrawHorizLine(x1, x2, y);
        }
        else { 
            if( ~(x1mod16 = 0) ) {      
                let start_addr = start_addr + 1;
                do Screen.subDrawHorizLine(x1, x1 + 16 - x1mod16, y);
            }
            if(~(x2mod16 = 0)) {      
                let end_addr = end_addr - 1;
                do Screen.subDrawHorizLine(x2 - x2mod16, x2, y);
            }
            while(~(start_addr > end_addr)) {     
                let screen[start_addr] = colour;
                let start_addr = start_addr + 1;
            }
        }
        
        return;
    }
    
    /** ------------------------------------------------------ */

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, temp;

        // handle x1 > x2
        if( x1 > x2 ) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx = 0) { do Screen.drawVertLine(x1, y1, y2); }
        else {
            if (dy = 0) { do Screen.drawHorizLine(x1, x2, y1); }
            else { do Screen.drawDiagLine(x1, y1, x2, y2, dx, dy); }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;

        while (~(y > y2)){
            do Screen.drawHorizLine(x1, x2, y);
            let y = y + 1;
        }
        
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
        var int rSquared;

        // Handle overflow
        if (r > 181) {
            let r = 181;
        }

        let dy = -r;
        let rSquared = Math.multiply(r, r);

        while ((~(dy > r))) {
            let dx = Math.sqrt(rSquared - Math.multiply(dy, dy));
            do Screen.drawHorizLine(x - dx, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
