// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array two_to_the;

    /** Initializes the library. */
    function void init() {
        let two_to_the = Array.new(16);

        let two_to_the[0] = 1;
        let two_to_the[1] = 2;
        let two_to_the[2] = 4;
        let two_to_the[3] = 8;
        let two_to_the[4] = 16;
        let two_to_the[5] = 32;
        let two_to_the[6] = 64;
        let two_to_the[7] = 128;
        let two_to_the[8] = 256;
        let two_to_the[9] = 512;
        let two_to_the[10] = 1024;
        let two_to_the[11] = 2048;
        let two_to_the[12] = 4096;
        let two_to_the[13] = 8192;
        let two_to_the[14] = 16384;
        let two_to_the[15] = 16384 + 16384;

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) { return -x; }
        else { return x; }
    }

    /** Returns true if the i'th bit of x is 1,
     *  and false otherwise.
     */
    function boolean bit(int x, int i){     
        return ~((x & two_to_the[i]) = 0);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, i, shiftedX;

        let shiftedX = x;
        let sum = 0;
        let i = 0;

        while (i < 16){
            if ( Math.bit(y, i) ) { let sum = sum + shiftedX; }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean is_neg_x, is_neg_y;
        var int q;
        var int res;

        let is_neg_x = (x < 0);
        let is_neg_y = (y < 0);

        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) { return 0; }
        let q = Math.divide(x, y + y);
        // TODO: modify 2*q*y so that there will be NO multiplication !!!
        if (x - (Math.multiply(q + q, y)) < y) { let res = q + q; }
        else { let res =  q + q + 1; }

        if (is_neg_x = is_neg_y) { return res; }
        else { return -res; }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j;
        var int val, val_to_the_two;

        let y = 0;
        let j = 7;  // 16/2 - 1

        while (~(j < 0)) {
            let val = y + two_to_the[j];
            let val_to_the_two = Math.multiply(val, val);

            if ((~(val_to_the_two > x)) & (val_to_the_two > 0)){
                let y = val;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) { return a; }
        else { return b; }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) { return b; }
        else { return a; }
    }
}
